"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProducerObjectStream = void 0;
const stream_1 = require("stream");
class ProducerObjectStream extends stream_1.Writable {
    constructor(kafka, options) {
        var _a;
        super({ objectMode: true, highWaterMark: (_a = options.highWaterMark) !== null && _a !== void 0 ? _a : 512 });
        this.producer = kafka.producer(options.config);
        this.options = options;
        this.connected = false;
    }
    _writev(chunks, callback) {
        (() => __awaiter(this, void 0, void 0, function* () {
            try {
                if (!this.connected) {
                    this.connected = true;
                    yield this.producer.connect();
                }
                yield this.producer.send({
                    topic: this.options.topic,
                    messages: chunks.map(({ chunk }) => { var _a, _b, _c; return (_c = (_b = (_a = this.options).transform) === null || _b === void 0 ? void 0 : _b.call(_a, chunk)) !== null && _c !== void 0 ? _c : chunk; }),
                    acks: this.options.acks,
                    timeout: this.options.timeout,
                    compression: this.options.compression,
                });
                callback(null);
            }
            catch (e) {
                callback(e);
            }
        }))();
    }
    _destroy(error) {
        this.producer.disconnect();
        super.destroy(error === null ? undefined : error);
    }
}
exports.ProducerObjectStream = ProducerObjectStream;
//# sourceMappingURL=ProducerObjectStream.js.map