import { Writable } from "stream";
export class ProducerObjectStream extends Writable {
    constructor(kafka, options) {
        super({ objectMode: true, highWaterMark: options.highWaterMark ?? 512 });
        this.producer = kafka.producer(options.config);
        this.options = options;
        this.connected = false;
    }
    _writev(chunks, callback) {
        (async () => {
            try {
                if (!this.connected) {
                    this.connected = true;
                    await this.producer.connect();
                }
                await this.producer.send({
                    topic: this.options.topic,
                    messages: chunks.map(({ chunk }) => this.options.transform?.(chunk) ?? chunk),
                    acks: this.options.acks,
                    timeout: this.options.timeout,
                    compression: this.options.compression,
                });
                callback(null);
            }
            catch (e) {
                callback(e);
            }
        })();
    }
    _destroy(error) {
        this.producer.disconnect();
        super.destroy(error === null ? undefined : error);
    }
}
//# sourceMappingURL=ProducerObjectStream.js.map