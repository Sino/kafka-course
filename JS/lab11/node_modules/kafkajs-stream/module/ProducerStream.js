import { Writable } from "stream";
export class ProducerStream extends Writable {
    constructor(kafka, options) {
        super();
        this.producer = kafka.producer(options.config);
        this.compression = options.compression;
        this.connected = false;
        this.topic = options.topic;
    }
    write(value, encoding, callback) {
        if (encoding === undefined) {
            return super.write(value);
        }
        if (typeof encoding === "string") {
            return super.write(value, encoding, callback);
        }
        return super.write(value, encoding);
    }
    _writev(chunks, callback) {
        (async () => {
            try {
                if (!this.connected) {
                    this.connected = true;
                    await this.producer.connect();
                }
                await this.producer.send({
                    topic: this.topic,
                    compression: this.compression,
                    messages: chunks.map(({ chunk }) => ({ value: Buffer.from(chunk) })),
                });
                callback(null);
            }
            catch (e) {
                callback(e);
            }
        })();
    }
    _destroy(error) {
        this.producer.disconnect();
        super.destroy(error === null ? undefined : error);
    }
}
//# sourceMappingURL=ProducerStream.js.map