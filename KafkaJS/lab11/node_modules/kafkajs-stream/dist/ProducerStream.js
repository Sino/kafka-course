"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProducerStream = void 0;
const stream_1 = require("stream");
class ProducerStream extends stream_1.Writable {
    constructor(kafka, options) {
        super();
        this.producer = kafka.producer(options.config);
        this.compression = options.compression;
        this.connected = false;
        this.topic = options.topic;
    }
    write(value, encoding, callback) {
        if (encoding === undefined) {
            return super.write(value);
        }
        if (typeof encoding === "string") {
            return super.write(value, encoding, callback);
        }
        return super.write(value, encoding);
    }
    _writev(chunks, callback) {
        (() => __awaiter(this, void 0, void 0, function* () {
            try {
                if (!this.connected) {
                    this.connected = true;
                    yield this.producer.connect();
                }
                yield this.producer.send({
                    topic: this.topic,
                    compression: this.compression,
                    messages: chunks.map(({ chunk }) => ({ value: Buffer.from(chunk) })),
                });
                callback(null);
            }
            catch (e) {
                callback(e);
            }
        }))();
    }
    _destroy(error) {
        this.producer.disconnect();
        super.destroy(error === null ? undefined : error);
    }
}
exports.ProducerStream = ProducerStream;
//# sourceMappingURL=ProducerStream.js.map