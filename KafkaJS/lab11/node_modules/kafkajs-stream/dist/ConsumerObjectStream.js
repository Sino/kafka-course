"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConsumerObjectStream = void 0;
const stream_1 = require("stream");
class ConsumerObjectStream extends stream_1.Readable {
    constructor(kafka, options) {
        var _a;
        super({ objectMode: true, highWaterMark: (_a = options.highWaterMark) !== null && _a !== void 0 ? _a : 512 });
        this.onCrash = (err) => __awaiter(this, void 0, void 0, function* () {
            console.error(err);
            this.init();
            yield this.start();
        });
        this.kafka = kafka;
        this.options = options;
        this.init();
    }
    init() {
        this.connected = false;
        this.started = false;
        this.paused = false;
    }
    _read() {
        (() => __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.start();
            }
            catch (e) {
                this.destroy(e);
            }
        }))();
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.connected) {
                this.connected = true;
                this.consumer = this.kafka.consumer(this.options.config);
                yield this.consumer.connect();
                for (const topic of this.options.topics) {
                    yield this.consumer.subscribe(topic);
                }
                this.consumer.on("consumer.crash", this.onCrash);
            }
            if (!this.started) {
                this.started = true;
                yield this.run();
            }
            if (this.paused) {
                this.paused = false;
            }
        });
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.consumer.run({
                eachBatchAutoResolve: false,
                eachBatch: ({ batch, resolveOffset, heartbeat }) => __awaiter(this, void 0, void 0, function* () {
                    var _a, _b, _c;
                    if (this.paused) {
                        return;
                    }
                    for (const message of batch.messages) {
                        if (this.paused) {
                            break;
                        }
                        const payload = (_c = (_b = (_a = this.options).transform) === null || _b === void 0 ? void 0 : _b.call(_a, message)) !== null && _c !== void 0 ? _c : message;
                        const continueToPush = this.push(payload);
                        resolveOffset(message.offset);
                        yield heartbeat();
                        if (!continueToPush) {
                            this.paused = true;
                        }
                    }
                }),
            });
        });
    }
    _destroy(error) {
        this.consumer.disconnect();
        super.destroy(error === null ? undefined : error);
    }
}
exports.ConsumerObjectStream = ConsumerObjectStream;
//# sourceMappingURL=ConsumerObjectStream.js.map